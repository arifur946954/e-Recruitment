// https://github.com/PDOK/locatieserver/wiki/API-Locatieserver
export class BasicGeocoderOptions {
}
export var ResponseTypes;
(function (ResponseTypes) {
    ResponseTypes[ResponseTypes["provincie"] = 0] = "provincie";
    ResponseTypes[ResponseTypes["gemeente"] = 1] = "gemeente";
    ResponseTypes[ResponseTypes["woonplaats"] = 2] = "woonplaats";
    ResponseTypes[ResponseTypes["weg"] = 3] = "weg";
    ResponseTypes[ResponseTypes["postcode"] = 4] = "postcode";
    ResponseTypes[ResponseTypes["adres"] = 5] = "adres";
    ResponseTypes[ResponseTypes["perceel"] = 6] = "perceel";
    ResponseTypes[ResponseTypes["hectometerpaal"] = 7] = "hectometerpaal";
    ResponseTypes[ResponseTypes["wijk"] = 8] = "wijk";
    ResponseTypes[ResponseTypes["buurt"] = 9] = "buurt";
    ResponseTypes[ResponseTypes["waterschapsgrens"] = 10] = "waterschapsgrens";
    ResponseTypes[ResponseTypes["appartementsrecht"] = 11] = "appartementsrecht";
})(ResponseTypes || (ResponseTypes = {}));
export var ResponseSources;
(function (ResponseSources) {
    ResponseSources[ResponseSources["BAG"] = 0] = "BAG";
    ResponseSources[ResponseSources["NWB"] = 1] = "NWB";
    ResponseSources[ResponseSources["BAG/NWB"] = 2] = "BAG/NWB";
    ResponseSources[ResponseSources["DKK"] = 3] = "DKK";
    ResponseSources[ResponseSources["Bestuurlijke Grenzen"] = 4] = "Bestuurlijke Grenzen";
    ResponseSources[ResponseSources["CBS"] = 5] = "CBS";
    ResponseSources[ResponseSources["HWH"] = 6] = "HWH"; // Waterschapshuis
})(ResponseSources || (ResponseSources = {}));
export class SuggestOptions extends BasicGeocoderOptions {
}
export class LookupOptions extends BasicGeocoderOptions {
}
export class ReverseOptions extends BasicGeocoderOptions {
}
export class SuggestResponse {
}
export class SuggestObject {
}
export class LookupResponse {
}
export class LookupObject {
}
export class ReverseResponse {
}
export class ReverseGeometry {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpZXNlcnZlci5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvZ2VvY29kZXIvbG9jYXRpZXNlcnZlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrREFBK0Q7QUFFL0QsTUFBTSxPQUFPLG9CQUFvQjtDQVFoQztBQUVELE1BQU0sQ0FBTixJQUFZLGFBYVg7QUFiRCxXQUFZLGFBQWE7SUFDdkIsMkRBQVMsQ0FBQTtJQUNULHlEQUFRLENBQUE7SUFDUiw2REFBVSxDQUFBO0lBQ1YsK0NBQUcsQ0FBQTtJQUNILHlEQUFRLENBQUE7SUFDUixtREFBSyxDQUFBO0lBQ0wsdURBQU8sQ0FBQTtJQUNQLHFFQUFjLENBQUE7SUFDZCxpREFBSSxDQUFBO0lBQ0osbURBQUssQ0FBQTtJQUNMLDBFQUFnQixDQUFBO0lBQ2hCLDRFQUFpQixDQUFBO0FBQ25CLENBQUMsRUFiVyxhQUFhLEtBQWIsYUFBYSxRQWF4QjtBQUVELE1BQU0sQ0FBTixJQUFZLGVBUVg7QUFSRCxXQUFZLGVBQWU7SUFDekIsbURBQUcsQ0FBQTtJQUNILG1EQUFHLENBQUE7SUFDSCwyREFBUyxDQUFBO0lBQ1QsbURBQUcsQ0FBQTtJQUNILHFGQUFzQixDQUFBO0lBQ3RCLG1EQUFHLENBQUE7SUFDSCxtREFBRyxDQUFBLENBQUMsa0JBQWtCO0FBQ3hCLENBQUMsRUFSVyxlQUFlLEtBQWYsZUFBZSxRQVExQjtBQUVELE1BQU0sT0FBTyxjQUFlLFNBQVEsb0JBQW9CO0NBS3ZEO0FBRUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxvQkFBb0I7Q0FFdEQ7QUFFRCxNQUFNLE9BQU8sY0FBZSxTQUFRLG9CQUFvQjtDQUl2RDtBQUVELE1BQU0sT0FBTyxlQUFlO0NBWTNCO0FBRUQsTUFBTSxPQUFPLGFBQWE7Q0FLekI7QUFHRCxNQUFNLE9BQU8sY0FBYztDQUkxQjtBQUVELE1BQU0sT0FBTyxZQUFZO0NBY3hCO0FBR0QsTUFBTSxPQUFPLGVBQWU7Q0FPM0I7QUFFRCxNQUFNLE9BQU8sZUFBZTtDQUszQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9QRE9LL2xvY2F0aWVzZXJ2ZXIvd2lraS9BUEktTG9jYXRpZXNlcnZlclxyXG5cclxuZXhwb3J0IGNsYXNzIEJhc2ljR2VvY29kZXJPcHRpb25zIHtcclxuICByb3dzPzogbnVtYmVyO1xyXG4gIHN0YXJ0PzogbnVtYmVyO1xyXG4gIHd0Pzogc3RyaW5nO1xyXG4gIGluZGVudD86IGJvb2xlYW47XHJcbiAgbGF0PzogbnVtYmVyO1xyXG4gIGxvbj86IG51bWJlcjtcclxuICBmcT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUmVzcG9uc2VUeXBlcyB7XHJcbiAgcHJvdmluY2llLFxyXG4gIGdlbWVlbnRlLFxyXG4gIHdvb25wbGFhdHMsXHJcbiAgd2VnLFxyXG4gIHBvc3Rjb2RlLFxyXG4gIGFkcmVzLFxyXG4gIHBlcmNlZWwsXHJcbiAgaGVjdG9tZXRlcnBhYWwsXHJcbiAgd2lqayxcclxuICBidXVydCxcclxuICB3YXRlcnNjaGFwc2dyZW5zLFxyXG4gIGFwcGFydGVtZW50c3JlY2h0XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFJlc3BvbnNlU291cmNlcyB7XHJcbiAgQkFHLFxyXG4gIE5XQixcclxuICAnQkFHL05XQicsXHJcbiAgREtLLFxyXG4gICdCZXN0dXVybGlqa2UgR3JlbnplbicsXHJcbiAgQ0JTLFxyXG4gIEhXSCAvLyBXYXRlcnNjaGFwc2h1aXNcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN1Z2dlc3RPcHRpb25zIGV4dGVuZHMgQmFzaWNHZW9jb2Rlck9wdGlvbnMge1xyXG4gIGZsPzogc3RyaW5nO1xyXG4gIHNvcnQ/OiBzdHJpbmc7XHJcbiAgcWY/OiBzdHJpbmc7XHJcbiAgYnE/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBPcHRpb25zIGV4dGVuZHMgQmFzaWNHZW9jb2Rlck9wdGlvbnMge1xyXG4gIGZsPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmV2ZXJzZU9wdGlvbnMgZXh0ZW5kcyBCYXNpY0dlb2NvZGVyT3B0aW9ucyB7XHJcbiAgZmw/OiBzdHJpbmc7XHJcbiAgdHlwZT86IHN0cmluZztcclxuICBkaXN0YW5jZT86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN1Z2dlc3RSZXNwb25zZSB7XHJcbiAgaGlnaGxpZ2h0aW5nOiB7fTtcclxuICByZXNwb25zZToge1xyXG4gICAgZG9jczogU3VnZ2VzdE9iamVjdFtdO1xyXG4gICAgbWF4U2NvcmU6IG51bWJlcjtcclxuICAgIG51bUZvdW5kOiBudW1iZXI7XHJcbiAgICBzdGFydDogbnVtYmVyO1xyXG4gIH07XHJcbiAgc3BlbGxjaGVjazoge1xyXG4gICAgY29sbGF0aW9uczogYW55LFxyXG4gICAgc3VnZ2VzdGlvbnM6IGFueVxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdWdnZXN0T2JqZWN0IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHNjb3JlOiBudW1iZXI7XHJcbiAgdHlwZTogc3RyaW5nO1xyXG4gIHdlZXJnYXZlbmFhbTogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIExvb2t1cFJlc3BvbnNlIHtcclxuICByZXNwb25zZToge1xyXG4gICAgZG9jczogTG9va3VwT2JqZWN0W11cclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9va3VwT2JqZWN0IHtcclxuICBicm9uOiBzdHJpbmc7XHJcbiAgY2VudHJvaWRlX2xsOiBhbnk7XHJcbiAgY2VudHJvaWRlX3JkOiBhbnk7XHJcbiAgZ2VvbWV0cmllX2xsPzogYW55O1xyXG4gIGdlb21ldHJpZV9yZD86IGFueTtcclxuICBnZW1lZW50ZWNvZGU/OiBzdHJpbmc7XHJcbiAgZ2VtZWVudGVuYWFtPzogc3RyaW5nO1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgaWRlbnRpZmljYXRpZTogc3RyaW5nO1xyXG4gIHByb3ZpbmNpZWFma29ydGluZzogc3RyaW5nO1xyXG4gIHByb3ZpbmNpZWNvZGU6IHN0cmluZztcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgd2VlcmdhdmVuYWFtOiBzdHJpbmc7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmV2ZXJzZVJlc3BvbnNlIHtcclxuICByZXNwb25zZToge1xyXG4gICAgZG9jczogYW55W107XHJcbiAgICBtYXhTY29yZTogbnVtYmVyO1xyXG4gICAgbnVtRm91bmQ6IG51bWJlcjtcclxuICAgIHN0YXJ0OiBudW1iZXI7XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJldmVyc2VHZW9tZXRyeSB7XHJcbiAgWD86IG51bWJlcjtcclxuICBZPzogbnVtYmVyO1xyXG4gIGxhdD86IG51bWJlcjtcclxuICBsb24/OiBudW1iZXI7XHJcbn1cclxuIl19