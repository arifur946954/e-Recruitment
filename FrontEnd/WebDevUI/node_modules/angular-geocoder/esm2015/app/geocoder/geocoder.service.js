import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import * as terraformerWktParser from 'terraformer-wkt-parser';
export class GeocoderService {
    constructor(http) {
        this.http = http;
        this.geocoderBaseUrl = 'https://geodata.nationaalgeoregister.nl/locatieserver/v3';
    }
    suggest(query, options) {
        let params = {
            q: query,
            fq: '*',
            start: 0,
            rows: 10,
        };
        if (options) {
            params = Object.assign(params, options);
        }
        return this.http.get(`${this.geocoderBaseUrl}/suggest?`, { params: params })
            .toPromise().then((suggestResultObject) => {
            const collations = this.formatCollations(suggestResultObject.spellcheck.collations);
            const places = this.formatPlaces(suggestResultObject);
            return { collations, places };
        });
    }
    suggest$(query, options) {
        let params = {
            q: query,
            fq: '*',
            start: 0,
        };
        if (options) {
            params = Object.assign(params, options);
        }
        return this.http.get(`${this.geocoderBaseUrl}/suggest?`, { params: params })
            .pipe(map((suggestResultObject) => {
            const collations = this.formatCollations(suggestResultObject.spellcheck.collations);
            const places = this.formatPlaces(suggestResultObject);
            return { collations, places };
        }));
    }
    lookup(id, options) {
        let params = {
            id: id,
            fl: '*'
        };
        if (options) {
            params = Object.assign(params, options);
        }
        return this.http.get(`${this.geocoderBaseUrl}/lookup?`, { params: params }).toPromise().then((lookupResponse) => {
            return this.formatLookupResponse(lookupResponse);
        });
    }
    lookup$(id, options) {
        let params = {
            id: id,
            fl: '*'
        };
        if (options) {
            params = Object.assign(params, options);
        }
        return this.http.get(`${this.geocoderBaseUrl}/lookup?`, { params: params }).pipe(map((lookupResponse) => this.formatLookupResponse(lookupResponse)));
    }
    free(searchTerm, options) {
        let params = {
            q: searchTerm,
            fl: '*',
            fq: '*',
            rows: 10,
            start: 0,
        };
        if (options) {
            params = Object.assign(params, options);
        }
        return this.http.get(`${this.geocoderBaseUrl}/free?`, { params: params })
            .toPromise().then((freeResponse) => {
            return this.formatReverseResponse(freeResponse);
        });
    }
    free$(searchTerm, options) {
        let params = {
            q: searchTerm,
            fl: '*',
            fq: '*',
            rows: 10,
            start: 0,
        };
        if (options) {
            params = Object.assign(params, options);
        }
        return this.http.get(`${this.geocoderBaseUrl}/free?`, { params: params }).pipe(map((freeResponse) => this.formatReverseResponse(freeResponse)));
    }
    reverse(location, options) {
        let params = {
            type: 'adres',
            fq: '*',
            fl: '*',
            rows: 10,
            distance: 200 // meter,
        };
        if (options) {
            params = Object.assign(params, options, location);
        }
        const reverseUrl = 'https://geodata.nationaalgeoregister.nl/locatieserver/revgeo?';
        return this.http.get(reverseUrl, { params: params }).toPromise().then((reverseResponse) => {
            return this.formatReverseResponse(reverseResponse);
        });
    }
    reverse$(location, options) {
        let params = {
            type: 'adres',
            fq: '*',
            fl: '*',
            rows: 10,
            distance: 200 // meter,
        };
        if (options) {
            params = Object.assign(params, options, location);
        }
        const reverseUrl = 'https://geodata.nationaalgeoregister.nl/locatieserver/revgeo?';
        return this.http.get(reverseUrl, { params: params }).pipe(map((reverseResponse) => this.formatReverseResponse(reverseResponse)));
    }
    formatCollations(collations) {
        const parsedCollations = [];
        for (let i = 0; i < collations.length; i += 2) {
            const collation = {
                id: i,
                naam: collations[i + 1].misspellingsAndCorrections[1],
                weergavenaam: `${collations[i + 1].hits} resultaten gevonden voor <strong> ${collations[i + 1].misspellingsAndCorrections[1]} </strong>`,
                hits: collations[i + 1].hits,
            };
            parsedCollations.push(collation);
        }
        return parsedCollations;
    }
    formatPlaces(suggestResponse) {
        const places = suggestResponse.response.docs.map((place) => {
            return Object.assign(Object.assign({}, place), { highlight: suggestResponse.highlighting[place.id].suggest[0] });
        });
        return places;
    }
    /**
     * Parse WKT in lookup response.
     */
    formatLookupResponse(lookupResponse) {
        const formatted = lookupResponse.response.docs.map((lookupResult) => {
            const formattedLookupResult = lookupResult;
            if (lookupResult.centroide_ll) {
                formattedLookupResult.centroide_ll = terraformerWktParser.parse(lookupResult.centroide_ll);
            }
            if (lookupResult.centroide_rd) {
                formattedLookupResult.centroide_rd = terraformerWktParser.parse(lookupResult.centroide_rd);
            }
            if (lookupResult.geometrie_rd) {
                formattedLookupResult.geometrie_rd = terraformerWktParser.parse(lookupResult.geometrie_rd);
            }
            if (lookupResult.geometrie_ll) {
                formattedLookupResult.geometrie_ll = terraformerWktParser.parse(lookupResult.geometrie_ll);
            }
            return formattedLookupResult;
        });
        return formatted[0] || {};
    }
    formatReverseResponse(lookupResultObject) {
        const formatted = lookupResultObject.response.docs.map((reverseResult) => {
            const formattedLookupResult = reverseResult;
            if (reverseResult.centroide_ll) {
                formattedLookupResult.centroide_ll = terraformerWktParser.parse(reverseResult.centroide_ll);
            }
            if (reverseResult.centroide_rd) {
                formattedLookupResult.centroide_rd = terraformerWktParser.parse(reverseResult.centroide_rd);
            }
            if (reverseResult.geometrie_rd) {
                formattedLookupResult.geometrie_rd = terraformerWktParser.parse(reverseResult.geometrie_rd);
            }
            if (reverseResult.geometrie_ll) {
                formattedLookupResult.geometrie_ll = terraformerWktParser.parse(reverseResult.geometrie_ll);
            }
            formattedLookupResult.highlight = reverseResult.weergavenaam;
            return formattedLookupResult;
        });
        return formatted;
    }
}
GeocoderService.decorators = [
    { type: Injectable }
];
GeocoderService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,